----------- Iterativo CÃºbico Tradicional ----------- 
#include <iostream>

using namespace std;

void multiplyMatrices(int** A, int** B, int** C, int rowsA, int colsA, int colsB) {
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < colsA; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    int rowsA, colsA, rowsB, colsB;
    cout << "Enter the number of rows and columns of matrix A: ";
    cin >> rowsA >> colsA;
    cout << "Enter the number of rows and columns of matrix B: ";
    cin >> rowsB >> colsB;

    if (colsA != rowsB) {
        cout << "Matrix multiplication not possible with these dimensions." << endl;
        return 1;
    }

    // Allocate memory for matrices
    int** A = new int*[rowsA];
    int** B = new int*[rowsB];
    int** C = new int*[rowsA];
    for (int i = 0; i < rowsA; ++i) {
        A[i] = new int[colsA];
        C[i] = new int[colsB];
    }
    for (int i = 0; i < rowsB; ++i) {
        B[i] = new int[colsB];
    }

    cout << "Enter elements of matrix A:\n";
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsA; ++j) {
            cin >> A[i][j];
        }
    }

    cout << "Enter elements of matrix B:\n";
    for (int i = 0; i < rowsB; ++i) {
        for (int j = 0; j < colsB; ++j) {
            cin >> B[i][j];
        }
    }

    multiplyMatrices(A, B, C, rowsA, colsA, colsB);

    cout << "Resultant matrix C:\n";
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            cout << C[i][j] << " ";
        }
        cout << endl;
    }

    // Deallocate memory
    for (int i = 0; i < rowsA; ++i) {
        delete[] A[i];
        delete[] C[i];
    }
    for (int i = 0; i < rowsB; ++i) {
        delete[] B[i];
    }
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}
