----------- Selection Sort -------------- Best: O(n^2); Worst: O(n^2); Average: O(n^2);
#include <iostream>
#include <chrono>
using namespace std;

// cambia pos de elementos
void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

void printArray(int array[], int size) {
  for (int i = 0; i < size; i++) {
    cout << array[i] << " ";
  }
  cout << endl;
}

void selectionSort(int array[], int size) {
  for (int step = 0; step < size - 1; step++) {
    int min_idx = step;
    for (int i = step + 1; i < size; i++) { 
      // Dependiendo de > o < el ordenamiento cambia (de mayor a menor o menor a mayor)
      if (array[i] < array[min_idx])
        min_idx = i;
    }

    // coloca el minimo en la posicion correcta
    swap(&array[min_idx], &array[step]);
  }
}

int main() {
  int cant;
  cout<<"Ingrese cantidad de datos: "<<endl;
  cin>>cant;
  int data[cant];
  for(int i = 0; i < cant; i++){
  	cin>>data[i];
  }
  int size = sizeof(data) / sizeof(data[0]);
  auto start = chrono::high_resolution_clock::now();
  selectionSort(data, size);
  auto end = chrono::high_resolution_clock::now();
  chrono::duration<double> elapsed = end - start;
  cout << "Arreglo ordenado de manera ascendente:\n";
  cout << "Elapsed time: " << elapsed.count() << " seconds\n";
  printArray(data, size);
  return 0;
}

-----------------------------------------

-------------- Merge Sort --------------- Best: O(n*log(n)); Worst: O(n*log(n)); Average: O(n*log(n));

#include <iostream>
#include <chrono>
using namespace std;

// junta los sub-arreglos
void merge(int arr[], int p, int q, int r) {
  
  int n1 = q - p + 1;
  int n2 = r - q;

  int L[n1], M[n2];

  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];

  int i, j, k;
  i = 0;
  j = 0;
  k = p;

  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

// divide el arreglo en 2 sub-arreglos, sortea estos y despuÃ©s los une
void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    // m es donde el arreglo se divide en 2
    int m = l + (r - l) / 2;

    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);

    // junta los sub-arreglos sorteados
    merge(arr, l, m, r);
  }
}

void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << " ";
  cout << endl;
}

int main() {
  int cant;
  cout<<"Ingrese cantidad de datos: "<<endl;
  cin>>cant;
  int arr[cant];
  for(int i = 0; i < cant; i++){
      cin>>arr[i];
  }
  int size = sizeof(arr) / sizeof(arr[0]);
  auto start = chrono::high_resolution_clock::now();
  mergeSort(arr, 0, size - 1);
  auto end = chrono::high_resolution_clock::now();
  chrono::duration<double> elapsed = end - start;
  
  cout << "Arreglo ordenado: \n";
  printArray(arr, size);
  cout << "Elapsed time: " << elapsed.count() << " seconds\n";
  return 0;
}

-----------------------------------------
-------------- Quick Sort --------------- Best: O(n*log(n)); Worst: O(n^2); Average: O(n*log(n));
#include <iostream>
#include <chrono>
using namespace std;

// swap de elementos
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

void printArray(int array[], int size) {
  int i;
  for (i = 0; i < size; i++)
    cout << array[i] << " ";
  cout << endl;
}

// reordenar arreglo, encuentra punto de particion
int partition(int array[], int low, int high) {
    
  // el elemento de extrema derecha como pivote
  int pivot = array[high];
  
  // puntero elemento mayor
  int i = (low - 1);

  // recorre el arreglo y lo compara con el pivote
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
        
      // si encuentra un elemento menor al pivote lo cambia por i
      i++;
      
      // cambia el elemento en i por el elemento en j
      swap(&array[i], &array[j]);
    }
  }
  
  // cambia el pivote por el mayor elemento en i
  swap(&array[i + 1], &array[high]);
  
  // vuelve a la particion
  return (i + 1);
}

void quickSort(int array[], int low, int high) {
  if (low < high) {
      
    // encuentra el pivote con tal de que los elementos menores quden a la izquierda de este y los mayores a la derecha
    int pi = partition(array, low, high);

    // llamada recursiva a la izquierda del pivote
    quickSort(array, low, pi - 1);

    // llamada recursiva a la derecha del pivote
    quickSort(array, pi + 1, high);
  }
}

int main() {
  int cant;
  cout<<"Ingrese cantidad de datos: "<<endl;
  cin>>cant;
  int data[cant];
  for(int i = 0; i < cant; i++){
      cin>>data[i];
  }
  int n = sizeof(data) / sizeof(data[0]);
  
//  cout << "Arreglo sin ordenar: \n"; // Printea los datos entregados
//  printArray(data, n);
  
  // llama la fx para ordenar
  quickSort(data, 0, n - 1);
  
  cout << "Arreglo ordenado de manera ascendente: \n";
  printArray(data, n);
}
-----------------------------------------
-------- Standard Library Sort ---------- Best: O(n*log(n)); Worst: O(n*log(n)); Average: O(n*log(n));
#include <bits/stdc++.h>
#include <iostream>
using namespace std;

void show(int a[], int array_size) { 
  for (int i = 0; i < array_size; ++i){
  	cout << a[i] << " ";
  } 
  cout<<'\n';
}

int main() {
  int cant;
  cout<<"Ingrese cantidad de datos: "<<endl;
  cin>>cant;
  int arr[cant];
  
  for(int i = 0; i < cant; i++){
  	cin>>arr[i];
  }
  
  int arrsize = sizeof(arr) / sizeof(arr[0]);
        
  sort(arr, arr + arrsize);
  
  cout<<"El arreglo ordenado es: "<<endl;
  show(arr, arrsize);
  
  return 0;
}
-----------------------------------------
